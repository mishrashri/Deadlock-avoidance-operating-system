Student Name: Narayan Mishra
Student ID: 11802830
Email Address: killer2017silent@gmail.com 
GitHub Link: https://github.com/mishrashri/OSCA3 
Code: 
#include<stdio.h>
int main()
{
	int pro,res,i,j,a=0,k=0,b=0,n;
	printf("Enter number of process::");
	scanf("%d",&pro);
	printf("Enter number of resources::");
	scanf("%d",&res);
	int max[pro][res],allocation[pro][res],available[res],need[pro][res],instance,finish[pro],request[pro][res];
	for(i=0;i<pro;i++)
	{
		finish[i]=0;
	}
	printf("Enter Maximum matrix::\n");
	for(i=0;i<pro;i++)
	{
		printf("P[%d]\t",i);
		for(j=0;j<res;j++)
		{
			scanf("\n%d",&instance);
			max[i][j]=instance;
		}
	}
	
	printf("Enter allocation matrix::\n");
	for(i=0;i<pro;i++)
	{
		printf("P[%d]\t",i);
		for(j=0;j<res;j++)
		{
			scanf("\n%d",&instance);
			allocation[i][j]=instance;
		}
	}
	printf("Enter available matrix::\n");
	for(j=0;j<res;j++)
	 {
			scanf("\n%d",&instance);
			available[j]=instance;
	 } 
	for(i=0;i<pro;i++)
	{
		
		for(j=0;j<res;j++)
		{
			need[i][j]=max[i][j]-allocation[i][j];
		}
	}
	printf("The required matrix is::");
	for(i=0;i<pro;i++)
	{
		printf("\nP[%d]\t",i);
		for(j=0;j<res;j++)
		{
			printf("%d\t",need[i][j]);
		
		}
	}
	printf("\n\n");
	printf("Enter 1 to check a normal safe sequence\n");
	printf("Enter 2 to check the sequence when additional resources are requested by P[0]\n");
	printf("Enter 3 to check the sequence when additional resources are requested by P[1]\n");
	scanf("\n%d",&n);
	
	switch(n)
	{
	case 1:
		
		
	printf("\n\n");
	printf("The safe sequence for the above given procceses if additional instances are not requested ::\n");
	printf("\n");
	while(a!=pro)
	{
		for(i=0;i<pro;i++)
		{
			for(j=0;j<res;j++)
		   {
		   	 if(need[i][j]<=available[j])
		   	 {
		   	 
		   	 	k++;
		   	
		   	 }
	       }
	       if(k==res && finish[i]==0)
	       {
	       	printf("P[%d]\t",i);
	       	finish[i]=1;
	       	for(j=0;j<res;j++)
	       	{
	       		available[j]=available[j]+allocation[i][j];
	       	}
	       	a++;
	       }
	        k=0;
	    }
		  	
		
	}
	break;
    //For P[0] requesting additional resources:
	case 2:
		
		
	printf("Enter additional request by P0 process\n");
	printf("request[0]::\t");
	for(j=0;j<res;j++)
	{
		
		scanf("%d",&instance);
		request[0][j]=instance;
	}
	for(j=0;j<res;j++)
	{
		if(request[0][j]<=need[0][j])
		{
			if(request[0][j]<=available[j])
			{
				available[j]=available[j]-request[0][j];
				allocation[0][j]=allocation[0][j]+request[0][j];
				need[0][j]=need[0][j]-request[0][j];
			}
			else
			{
				printf("P[0] must wait because resources are not available\n");
			}
		}
		else
		{
			printf("The process has exceeded the maximum claim\n");
		}
	}
	printf("The sequence after additional request by P[0] is::::<<");
	while(a!=pro)
	{
		b=a;
		for(i=0;i<pro;i++)
		{
			for(j=0;j<res;j++)
			{
				if(need[i][j]<=available[j])
				{
					k++;
				}
			}
			if(k==res && finish[i]==0)
			{
				printf("P[%d]",i);
				finish[i]=1;
				for(j=0;j<res;j++)
				{
					available[j]=available[j]+allocation[i][j];
				}
				a++;
			}
			k=0;
		}
		if(a==b)
		{
			printf("\tStop after this system is unsafe...there is a deadlock>>\n\n");
			printf("So Reena''s operating system is unsafe if there is a additional request by P[0]\n");
			break;
		}
	}
	break;
	
	//For P[1] requesting additional resources
	case 3:
		printf("Enter additional request by P[1] processes\n");
		printf("request[0]::\t");
	for(j=0;j<res;j++)
	{
		scanf("%d",&instance);
		request[0][j]=instance;
	}
	for(j=0;j<res;j++)
	{
		if(request[0][j]<=need[1][j])
		{
			if(request[0][j]<=available[j])
			{
				available[j]=available[j]-request[0][j];
				allocation[1][j]=allocation[1][j]+request[0][j];
				need[1][j]=need[1][j]-request[0][j];
			}
			else
			{
				printf("P[0] must wait because resources are not available\n");
			}
		}
		else
		{
			printf("The process has exceeded the maximum claim\n");
		}
	}
	printf("The sequence after additional request by P[1] is::::");
	while(a!=pro)
	{
		b=a;
		for(i=0;i<pro;i++)
		{
			for(j=0;j<res;j++)
			{
				if(need[i][j]<=available[j])
				{
					k++;
				}
			}
			if(k==res && finish[i]==0)
			{
				printf("P[%d]\t",i);
				finish[i]=1;
				for(j=0;j<res;j++)
				{
					available[j]=available[j]+allocation[i][j];
				}
				a++;
			}
			k=0;
		}
	
		if(a==b)
		{
			printf("\tStop after this system is unsafe...there is a deadlock>>\n\n");
			printf("So Reena''s operating system is unsafe if there is a additional request by P[0]\n");
			break;
		}
		
	}
	break;		 
}
	
	return 0;
}























1.Explain the problem in terms of operating system concept?  
Description: According to question,
Available = [ ABC ] = [ 3 2 2 ]
Now,
Need = Max – Allocation
So, we have-
 
	Allocation	Max	Need
	A	B	C	A	B	C	A	B	C
P0	0	0	1	8	4	3	8	4	2
P1	3	2	0	6	2	0	3	0	0
P2	2	1	1	3	3	3	1	2	2
 
Currently, the system is in safe state.
(It is given in question. If we want, we can check)
 
Checking Whether REQ1 Can Be Entertained-
 
•	Need of P0 = [ 0 0 2 ]
•	Available = [ 3 2 2 ]
 
Clearly,
•	With the instances available currently, the requirement of REQ1 can be satisfied.
•	So, banker’s algorithm assumes that the request REQ1 is entertained.
•	It then modifies its data structures as-
 
	Allocation	Max	Need
	A	B	C	   A	B	C	A	B	C
P0	0	0	3	8	4	3	8	4	0
P1	3	2	0	6	2	0	3	0	0
P2	2	1	1	3	3	3	1	2	2
 
Available
= [ 3 2 2 ] – [ 0 0 2 ]
= [ 3 2 0 ]
 
•	Now, it follows the safety algorithm to check whether this resulting state is a safe state or not.
•	If it is a safe state, then REQ1 can be permitted otherwise not.
 
Step-01:
 
•	With the instances available currently, only the requirement of the process P1 can be satisfied.
•	So, process P1 is allocated the requested resources.
•	It completes its execution and then free up the instances of resources held by it.
 
Then-
Available
= [ 3 2 0 ] + [ 3 2 0 ]
= [ 6 4 0 ]
 
Now,
•	It is not possible to entertain any process.
•	The system has entered the deadlock state which is an unsafe state.
•	Thus, REQ1 will not be permitted.
 
Checking Whether REQ2 Can Be Entertained-
 
•	Need of P1 = [ 2 0 0 ]
•	Available = [ 3 2 2 ]
 
Clearly,
•	With the instances available currently, the requirement of REQ1 can be satisfied.
•	So, banker’s algorithm assumes the request REQ2 is entertained.
•	It then modifies its data structures as-
 
	Allocation	Max	Need
	A	B	C	A	B	C	A	B	C
P0	0	0	1	8	4	3	8	4	2
P1	5	2	0	6	2	0	1	0	0
P2	2	1	1	3	3	3	1	2	2
 
Available
= [ 3 2 2 ] – [ 2 0 0 ]
= [ 1 2 2 ]
 
•	Now, it follows the safety algorithm to check whether this resulting state is a safe state or not.
•	If it is a safe state, then REQ2 can be permitted otherwise not.
 
Step-01:
 
•	With the instances available currently, only the requirement of the process P1 can be satisfied.
•	So, process P1 is allocated the requested resources.
•	It completes its execution and then free up the instances of resources held by it.
 
Then-
Available
= [ 1 2 2 ] + [ 5 2 0 ]
= [ 6 4 2 ]
 
Step-02:
 
•	With the instances available currently, only the requirement of the process P2 can be satisfied.
•	So, process P2 is allocated the requested resources.
•	It completes its execution and then free up the instances of resources held by it.
 
Then-
Available
= [ 6 4 2 ] + [ 2 1 1 ]
= [ 8 5 3 ]
 
Step-03:
 
•	With the instances available currently, the requirement of the process P0 can be satisfied.
•	So, process P0 is allocated the requested resources.
•	It completes its execution and then free up the instances of resources held by it.
 
Then-
Available
= [ 8 5 3 ] + [ 0 0 1 ]
= [ 8 5 4 ]
 
Thus,
•	There exists a safe sequence P1, P2, P0 in which all the processes can be executed.
•	So, the system is in a safe state.
•	Thus, REQ2 can be permitted.


2.Write the algorithm for proposed solution of the assigned problem. 
Algorithm:
Safety algorithm
The algorithm for finding out whether a system is in a safe state can be described as follows:
1) Let Work and Finish be vectors of length ‘m’ and ‘n’ respectively.
Initialize: Work = Available
Finish[i] = false; for i=1, 2, 3, 4….n
2) Find an i such that both
             a) Finish[i] = false
             b) Needi <= Work
             if no such i exists goto step (4)
3) Work = Work + Allocation[i]
Finish[i] = true
goto step (2)
4) if Finish [i] = true for all i
then the system is in a safe state

Resource-request algorithm 
Let Requesti be the request array for process Pi. Requesti [j] = k means process Pi wants k instances of resource type Rj. When a request for resources is made by process Pi, the following actions are taken:
1) If Requesti <= Needi
Goto step (2) ; 
otherwise, raise an error condition, since the process has exceeded its maximum claim.
2) If Requesti <= Available
Goto step (3); 
otherwise, Pi must wait, since the resources are not available.
3) Have the system pretend to have allocated the requested resources to process Pi by modifying the state as
follows:
               Available = Available – Requesti
               Allocationi = Allocationi + Requesti
               Needi = Needi– Requesti

3.Calculate complexity of implemented algorithm. (Student must specify complexity of each line of code along with overall complexity) 
Description: The time complexity of the Banker's algorithm as a function of the number n of processes and m of resources is o(n*n*m). 


4.Explain all the constraints given in the problem. Attach the code snippet of the implemented constraint. 
Description: pro is for process, res is for resource, a and b are temporary constraints, k is used as count here and is used for number of processes.
Code snippet:  
 	int pro,res,i,j,a=0,k=0,b=0,n;
	printf("Enter number of process::");
	scanf("%d",&pro);
	printf("Enter number of resources::");
	scanf("%d",&res);
	int max[pro][res],allocation[pro][res],available[res],need[pro][res],instance,finish[pro],request[pro][res];
	for(i=0;i<pro;i++)
	{
		finish[i]=0;
	}
	printf("Enter Maximum matrix::\n");
	for(i=0;i<pro;i++)
	{
		printf("P[%d]\t",i);
		for(j=0;j<res;j++)
		{
			scanf("\n%d",&instance);
			max[i][j]=instance;
		}
	}

  
5.If you have implemented any additional algorithm to support the solution, explain the need and usage of the same.   
Description: 
Resource-request Algorithm 
Let Requesti be the request array for process Pi. Requesti [j] = k means process Pi wants k instances of resource type Rj. When a request for resources is made by process Pi, the following actions are taken:
1) If Requesti <= Needi
Goto step (2) ; 
otherwise, raise an error condition, since the process has exceeded its maximum claim.
2) If Requesti <= Available
Goto step (3); 
otherwise, Pi must wait, since the resources are not available.
3) Have the system pretend to have allocated the requested resources to process Pi by modifying the state as
follows:
               Available = Available – Requesti
               Allocationi = Allocationi + Requesti
               Needi = Needi– Requesti





6. Explain the boundary conditions off the implemented code. 
 Description: The Banker algorithm, sometimes referred to as the detection algorithm,
 is a resource allocation and deadlock avoidance algorithm developed by Dijkstra that
 tests for safety by simulating the allocation of predetermined maximum possible 
amounts of all resources.
Let ‘n’ be the number of processes in the system and ‘m’ be the number of resources types.
Available : 
->It is a 1-d array of size ‘m’ indicating the number of available resources of each 
type.
->Available[ j ] = k means there are ‘k’ instances of resource type Rj
            Max :
->It is a 2-d array of size ‘n*m’ that defines the maximum demand of each process in 
a system.
->Max[ i, j ] = k means process Pi may request at most ‘k’ instances of resource 
type Rj.
Allocation :
->It is a 2-d array of size ‘n*m’ that defines the number of resources of each type 
currently allocated to each process.
->Allocation[ i, j ] = k means process Pi is currently allocated ‘k’ instances of resource type Rj
Need :
->It is a 2-d array of size ‘n*m’ that indicates the remaining resource need of each 
process.
->Need [ i,   j ] = k means process Pi currently need ‘k’ instances of resource type Rj
for its execution.
->Need [ i,   j ] = Max [ i,   j ] – Allocation [ i,   j ]
 
 
          7.Explain all the test cases applied on the solution of assigned problem. 
Description: The banker’s algorithm is a resource allocation and deadlock avoidance algorithm that tests for safety by simulating the allocation for predetermined maximum possible amounts of all resources, then makes an “s-state” check to test for possible activities, before deciding whether allocation should be allowed to continue.
In solution of problem different test cases are working for switch statement if you take greater or less than available if it will give you error.
 
8.Have you made minimum 5 revisions of solution on GitHub? Answer: - Yes! 
GitHub Link: https://github.com/mishrashri/OSCA3
 

